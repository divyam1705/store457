// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Store{
  id  String  @id @default(dbgenerated("uuid_generate_v1()"))
  name  String
  userId  String
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[] @relation("StoreToCategory")
  sizes Size[] @relation("StoreToSize")
  promoCodes PromoCode[] @relation("StoreToPromoCode")
  colors Color[] @relation("StoreToColor")
  products Product[] @relation("StoreToProduct")
  orders Order[] @relation("StoreToOrder")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Billboard{
  id  String @id @default(uuid())
  storeId String
  store  Store @relation("StoreToBillboard",fields: [storeId],references: [id])
  label String
  imageUrl String 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  categories Category[]
  @@index([storeId])
}

model Category{
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToCategory",fields: [storeId],references: [id])
  billboardId String
  billboard Billboard @relation(fields: [billboardId],references: [id])
  products Product[] @relation("CategoryToProduct")
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([billboardId])

}

model Size{
    id String @id @default(uuid())
    storeId String
    store Store @relation("StoreToSize",fields:[storeId],references: [id])
    name String
    value String
    stocks Stock[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([storeId])
}

model Color{
    id String @id @default(uuid())
    storeId String
    store Store @relation("StoreToColor",fields:[storeId],references: [id])
    name String
    value String
    products Product[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([storeId])
}

model Product{
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToProduct",fields: [storeId],references: [id])
  categoryId String
  category Category @relation("CategoryToProduct",fields: [categoryId],references: [id])
  name String
  price Decimal
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)
  stocks Stock[]
  colorId String
  color Color @relation(fields: [colorId],references: [id])
  images Image[]
  orderItems OrderItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image{
  id String @id @default(uuid())
  productId String
  product Product @relation(fields: [productId],references: [id], onDelete: Cascade)
  url String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Stock{
  id String @id @default(uuid())
  productId String
  product Product @relation(fields: [productId],references: [id], onDelete: Cascade)
  sizeId String
  size Size @relation(fields: [sizeId],references: [id], onDelete: Cascade)
  stockValue Int  @default(0)
  sizeValue String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // @@index([sizeId])
  // @@index([productId])
}

model Order{
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToOrder", fields: [storeId],references: [id])
  orderItems OrderItem[]
  isPaid Boolean @default(false)
  phone String @default("")
  address String @default("")
  email String @default("")
  promoCodeId String 
  promoCode PromoCode @relation(fields: [promoCodeId],references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem{
  id String @id @default(uuid())
  orderId String
  order Order @relation(fields: [orderId],references: [id])
  productId String
  product Product @relation(fields: [productId],references: [id])
  sizeValue String
}

model PromoCode{
    id String @id @default(uuid())
    storeId String
    store Store @relation("StoreToPromoCode",fields:[storeId],references: [id])
    name String
    value String
    orders Order[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([storeId])
}